
const float EMA_alpha = 0.1;
const byte sensorPin = A0;
const byte laserPin = 8;
const byte ledCount = 6;
const byte ledPins[ledCount] = {2, 3, 4, 5, 6, 7};

int EMA_S = 0;
unsigned long startNoise = 0;
unsigned long noiseDelay = 500;

//#define DEBUG


void setup() {

#ifdef DEBUG
  Serial.begin(9600);
#endif

  pinMode(sensorPin, INPUT);
  pinMode(laserPin, OUTPUT);
  for (int i = 0; i < ledCount; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins, LOW);
  }
  digitalWrite(laserPin, HIGH);

}


// the loop routine runs over and over again forever:
void loop() {
// Take reading and smooth out
  int reading = analogRead(sensorPin);
  int deviation = abs(reading - 512);
  EMA_S = (EMA_alpha * deviation) + ((1 - EMA_alpha) * EMA_S);

#ifdef DEBUG
  Serial.print("Input: ");
  Serial.println(EMA_S);
#endif

// Map readings to 6 LEDs
  int ledLevel = map(EMA_S, 10, 350, 0, ledCount);
  ledLevel = constrain(ledLevel, 0, ledCount);

#ifdef DEBUG
  Serial.print("LED: ");
  Serial.println(ledLevel);
#endif

  delay(10);

// Reset timer while there is no noise
  if (ledLevel == 0) {
    startNoise = millis();
    digitalWrite(ledPins[0], LOW);
  }

// Debounce delay to stop sudden bangs triggering sensor
  if ((millis() - startNoise) > noiseDelay) {
  
// Light the progress LEDs  
    for (int thisLed = 0; thisLed < ledCount; thisLed++) {
      if (thisLed < ledLevel) {
        digitalWrite(ledPins[thisLed], HIGH);
      }
      else {
        digitalWrite(ledPins[thisLed], LOW);
      }
    }
    
// Trigger relay once loud enough    
    if (ledLevel == ledCount) {
      digitalWrite(laserPin, LOW);
      delay(10000);
      digitalWrite(laserPin, HIGH);
    }
  }
}
